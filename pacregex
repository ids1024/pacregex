#!/usr/bin/env python3

import os
import re
import sys
import subprocess
from pycman import config
import pyparsing
import argparse
import urllib.request
import json
import tarfile

datadir = os.path.expanduser("~/.pacregex/")
handle = config.init_with_config("/etc/pacman.conf")

operator = pyparsing.Regex("!=|=").setName("operator")
allowedchars = ''.join(set(pyparsing.printables) - set('!="()'))
text = pyparsing.Word(allowedchars) | pyparsing.QuotedString('"')
condition = pyparsing.Group((text + operator + text) | text)

expr = pyparsing.operatorPrecedence(condition, [
    ("not", 1, pyparsing.opAssoc.RIGHT),
    ("and", 2, pyparsing.opAssoc.LEFT),
    ("or", 2, pyparsing.opAssoc.LEFT)
])
filelist = None


class EvaluationError(Exception):
    pass


def parseMetadata():
    syncpkgs = (pkg for db in handle.get_syncdbs() for pkg in db.pkgcache)
    packages = {}
    for package in syncpkgs:
        pacmeta = {}
        pacmeta['name'] = [package.name]
        pacmeta['provide'] = package.provides
        pacmeta['depend'] = package.depends
        pacmeta['optdepend'] = package.optdepends
        pacmeta['group'] = package.groups
        pacmeta['replace'] = package.replaces
        pacmeta['conflict'] = package.conflicts
        pacmeta['license'] = package.licenses
        pacmeta['packager'] = [package.packager]
        pacmeta['url'] = [package.url or '']
        pacmeta['desc'] = [package.desc]
        pacmeta['repo'] = [package.db.name]
        packages[package.name] = pacmeta

    return packages


def sync():
    os.makedirs(datadir, exist_ok=True)
    origdir = os.getcwd()
    os.chdir(datadir)
    print("Getting file lists from sync dbs...", file=sys.stderr)
    filelist = {}
    if not os.path.exists('.rsyncfilelists'):
        os.mkdir('.rsyncfilelists')

    os.chdir('.rsyncfilelists')
    for db in handle.get_syncdbs():
        if db.name in ('core', 'extra', 'community', 'multilib' ,'testing',
                'community-testing', 'multilib-testing') and \
                handle.arch in ('i686', 'x86_64'):
            filename = "rsync://mirror.aarnet.edu.au/archlinux/" + db.name + \
                       '/os/' + handle.arch + '/' + db.name + '.files'
        else:
            filename = db.servers[0] + '/' + db.name + '.files'

        print(filename, file=sys.stderr)

        if filename.startswith('rsync://'):
            returnval = subprocess.call(["rsync", "-Lq", filename, './'],
                                        stdout=sys.stderr)
            if returnval != 0:
                print("Error: rsync returned nonzero exit status",
                      file=sys.stderr)
                continue
            tar = tarfile.open(db.name + '.files', mode='r:*')

        else:
            try:
                files = urllib.request.urlopen(filename)
            except urllib.error.HTTPError:
                print("Unable to find file list for '" + db.name + "': Skipping",
                      file=sys.stderr)
                continue
            tar = tarfile.open(mode='r|*', fileobj=files)
        filelist.update({i.name.rsplit('-', 2)[0]:
                         tar.extractfile(
                             i).read().decode().splitlines()[1:]
                         for i in tar if i.name.endswith('/files')})
        tar.close()
    os.chdir('..')

    with open('filelist', 'w') as file:
        json.dump(filelist, file)
    os.chdir(origdir)


def evaluateExpr(pacmeta, tokens):
    if len(tokens) == 1 and isinstance(tokens[0], str):
        return (tokens[0] in pacmeta) and pacmeta[tokens[0]]
    if len(tokens) == 1:
        return evaluateExpr(pacmeta, tokens[0])
    if len(tokens) == 2 and tokens[0] == 'not':
        return not evaluateExpr(pacmeta, tokens[1])

    operator = tokens[1]
    if operator in ('and', 'or'):
        values = (i if isinstance(i, bool) else
                  evaluateExpr(pacmeta, i)
                  for i in tokens[::2])  # All but operators
        return ((operator == 'and' and all(values)) or
                (operator == 'or' and any(values)))
    elif operator in ('=', '!='):
        global filelist
        pacvalues = pacmeta.get(tokens[0], ())
        if tokens[0] == 'file':
            if not filelist:
                with open(datadir + 'filelist') as file:
                    filelist = json.load(file)
            pacvalues = filelist.get(pacmeta['name'][0], ())
        match = any(re.findall(tokens[2], i) for i in pacvalues)
        return (operator == '=' and match) or (operator == '!=' and not match)
    else:
        # This code should never be reached; raise exception if it is
        raise EvaluationError


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Advanced regex search of pacman repositories')
    parser.add_argument('--sync', action='store_true',
                        help='synchronize file lists')
    parser.add_argument('query', nargs='?', default='')
    args = parser.parse_args()

    if args.sync:
        sync()
        sys.exit(0)
    if not os.path.exists(datadir):
        print("Data directory does not exist: running initial sync",
              file=sys.stderr)
        sync()

    packages = parseMetadata().items()
    if not args.query:
        # Display all packages by default
        matches = (package for package, pacmeta in packages)
    else:
        try:
            tree = expr.parseString(args.query, parseAll=True)
        except pyparsing.ParseException as e:
            print("Error parsing query at column " + str(e.col))
            sys.exit(1)
        matches = (package for package, pacmeta in packages
                   if evaluateExpr(pacmeta, tree))
    for i in matches:
        print(i)
